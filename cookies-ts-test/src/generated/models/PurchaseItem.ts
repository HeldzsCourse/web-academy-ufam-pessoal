
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `PurchaseItem` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model PurchaseItem
 * 
 */
export type PurchaseItemModel = runtime.Types.Result.DefaultSelection<Prisma.$PurchaseItemPayload>

export type AggregatePurchaseItem = {
  _count: PurchaseItemCountAggregateOutputType | null
  _avg: PurchaseItemAvgAggregateOutputType | null
  _sum: PurchaseItemSumAggregateOutputType | null
  _min: PurchaseItemMinAggregateOutputType | null
  _max: PurchaseItemMaxAggregateOutputType | null
}

export type PurchaseItemAvgAggregateOutputType = {
  quantity: number | null
}

export type PurchaseItemSumAggregateOutputType = {
  quantity: number | null
}

export type PurchaseItemMinAggregateOutputType = {
  id: string | null
  quantity: number | null
  createdAt: Date | null
  updatedAt: Date | null
  purchaseId: string | null
  productId: string | null
}

export type PurchaseItemMaxAggregateOutputType = {
  id: string | null
  quantity: number | null
  createdAt: Date | null
  updatedAt: Date | null
  purchaseId: string | null
  productId: string | null
}

export type PurchaseItemCountAggregateOutputType = {
  id: number
  quantity: number
  createdAt: number
  updatedAt: number
  purchaseId: number
  productId: number
  _all: number
}


export type PurchaseItemAvgAggregateInputType = {
  quantity?: true
}

export type PurchaseItemSumAggregateInputType = {
  quantity?: true
}

export type PurchaseItemMinAggregateInputType = {
  id?: true
  quantity?: true
  createdAt?: true
  updatedAt?: true
  purchaseId?: true
  productId?: true
}

export type PurchaseItemMaxAggregateInputType = {
  id?: true
  quantity?: true
  createdAt?: true
  updatedAt?: true
  purchaseId?: true
  productId?: true
}

export type PurchaseItemCountAggregateInputType = {
  id?: true
  quantity?: true
  createdAt?: true
  updatedAt?: true
  purchaseId?: true
  productId?: true
  _all?: true
}

export type PurchaseItemAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PurchaseItem to aggregate.
   */
  where?: Prisma.PurchaseItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PurchaseItems to fetch.
   */
  orderBy?: Prisma.PurchaseItemOrderByWithRelationInput | Prisma.PurchaseItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PurchaseItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PurchaseItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PurchaseItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PurchaseItems
  **/
  _count?: true | PurchaseItemCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PurchaseItemAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PurchaseItemSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PurchaseItemMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PurchaseItemMaxAggregateInputType
}

export type GetPurchaseItemAggregateType<T extends PurchaseItemAggregateArgs> = {
      [P in keyof T & keyof AggregatePurchaseItem]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePurchaseItem[P]>
    : Prisma.GetScalarType<T[P], AggregatePurchaseItem[P]>
}




export type PurchaseItemGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PurchaseItemWhereInput
  orderBy?: Prisma.PurchaseItemOrderByWithAggregationInput | Prisma.PurchaseItemOrderByWithAggregationInput[]
  by: Prisma.PurchaseItemScalarFieldEnum[] | Prisma.PurchaseItemScalarFieldEnum
  having?: Prisma.PurchaseItemScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PurchaseItemCountAggregateInputType | true
  _avg?: PurchaseItemAvgAggregateInputType
  _sum?: PurchaseItemSumAggregateInputType
  _min?: PurchaseItemMinAggregateInputType
  _max?: PurchaseItemMaxAggregateInputType
}

export type PurchaseItemGroupByOutputType = {
  id: string
  quantity: number
  createdAt: Date
  updatedAt: Date
  purchaseId: string
  productId: string
  _count: PurchaseItemCountAggregateOutputType | null
  _avg: PurchaseItemAvgAggregateOutputType | null
  _sum: PurchaseItemSumAggregateOutputType | null
  _min: PurchaseItemMinAggregateOutputType | null
  _max: PurchaseItemMaxAggregateOutputType | null
}

type GetPurchaseItemGroupByPayload<T extends PurchaseItemGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PurchaseItemGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PurchaseItemGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PurchaseItemGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PurchaseItemGroupByOutputType[P]>
      }
    >
  >



export type PurchaseItemWhereInput = {
  AND?: Prisma.PurchaseItemWhereInput | Prisma.PurchaseItemWhereInput[]
  OR?: Prisma.PurchaseItemWhereInput[]
  NOT?: Prisma.PurchaseItemWhereInput | Prisma.PurchaseItemWhereInput[]
  id?: Prisma.StringFilter<"PurchaseItem"> | string
  quantity?: Prisma.IntFilter<"PurchaseItem"> | number
  createdAt?: Prisma.DateTimeFilter<"PurchaseItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PurchaseItem"> | Date | string
  purchaseId?: Prisma.StringFilter<"PurchaseItem"> | string
  productId?: Prisma.StringFilter<"PurchaseItem"> | string
  purchase?: Prisma.XOR<Prisma.PurchaseScalarRelationFilter, Prisma.PurchaseWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type PurchaseItemOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  purchaseId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  purchase?: Prisma.PurchaseOrderByWithRelationInput
  product?: Prisma.ProductOrderByWithRelationInput
  _relevance?: Prisma.PurchaseItemOrderByRelevanceInput
}

export type PurchaseItemWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PurchaseItemWhereInput | Prisma.PurchaseItemWhereInput[]
  OR?: Prisma.PurchaseItemWhereInput[]
  NOT?: Prisma.PurchaseItemWhereInput | Prisma.PurchaseItemWhereInput[]
  quantity?: Prisma.IntFilter<"PurchaseItem"> | number
  createdAt?: Prisma.DateTimeFilter<"PurchaseItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PurchaseItem"> | Date | string
  purchaseId?: Prisma.StringFilter<"PurchaseItem"> | string
  productId?: Prisma.StringFilter<"PurchaseItem"> | string
  purchase?: Prisma.XOR<Prisma.PurchaseScalarRelationFilter, Prisma.PurchaseWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type PurchaseItemOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  purchaseId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  _count?: Prisma.PurchaseItemCountOrderByAggregateInput
  _avg?: Prisma.PurchaseItemAvgOrderByAggregateInput
  _max?: Prisma.PurchaseItemMaxOrderByAggregateInput
  _min?: Prisma.PurchaseItemMinOrderByAggregateInput
  _sum?: Prisma.PurchaseItemSumOrderByAggregateInput
}

export type PurchaseItemScalarWhereWithAggregatesInput = {
  AND?: Prisma.PurchaseItemScalarWhereWithAggregatesInput | Prisma.PurchaseItemScalarWhereWithAggregatesInput[]
  OR?: Prisma.PurchaseItemScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PurchaseItemScalarWhereWithAggregatesInput | Prisma.PurchaseItemScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PurchaseItem"> | string
  quantity?: Prisma.IntWithAggregatesFilter<"PurchaseItem"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PurchaseItem"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PurchaseItem"> | Date | string
  purchaseId?: Prisma.StringWithAggregatesFilter<"PurchaseItem"> | string
  productId?: Prisma.StringWithAggregatesFilter<"PurchaseItem"> | string
}

export type PurchaseItemCreateInput = {
  id?: string
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
  purchase: Prisma.PurchaseCreateNestedOneWithoutPurchaseItemInput
  product: Prisma.ProductCreateNestedOneWithoutPurchaseItemInput
}

export type PurchaseItemUncheckedCreateInput = {
  id?: string
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
  purchaseId: string
  productId: string
}

export type PurchaseItemUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchase?: Prisma.PurchaseUpdateOneRequiredWithoutPurchaseItemNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutPurchaseItemNestedInput
}

export type PurchaseItemUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchaseId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PurchaseItemCreateManyInput = {
  id?: string
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
  purchaseId: string
  productId: string
}

export type PurchaseItemUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PurchaseItemUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchaseId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PurchaseItemListRelationFilter = {
  every?: Prisma.PurchaseItemWhereInput
  some?: Prisma.PurchaseItemWhereInput
  none?: Prisma.PurchaseItemWhereInput
}

export type PurchaseItemOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PurchaseItemOrderByRelevanceInput = {
  fields: Prisma.PurchaseItemOrderByRelevanceFieldEnum | Prisma.PurchaseItemOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type PurchaseItemCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  purchaseId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
}

export type PurchaseItemAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type PurchaseItemMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  purchaseId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
}

export type PurchaseItemMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  purchaseId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
}

export type PurchaseItemSumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
}

export type PurchaseItemCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.PurchaseItemCreateWithoutProductInput, Prisma.PurchaseItemUncheckedCreateWithoutProductInput> | Prisma.PurchaseItemCreateWithoutProductInput[] | Prisma.PurchaseItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.PurchaseItemCreateOrConnectWithoutProductInput | Prisma.PurchaseItemCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.PurchaseItemCreateManyProductInputEnvelope
  connect?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
}

export type PurchaseItemUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.PurchaseItemCreateWithoutProductInput, Prisma.PurchaseItemUncheckedCreateWithoutProductInput> | Prisma.PurchaseItemCreateWithoutProductInput[] | Prisma.PurchaseItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.PurchaseItemCreateOrConnectWithoutProductInput | Prisma.PurchaseItemCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.PurchaseItemCreateManyProductInputEnvelope
  connect?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
}

export type PurchaseItemUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.PurchaseItemCreateWithoutProductInput, Prisma.PurchaseItemUncheckedCreateWithoutProductInput> | Prisma.PurchaseItemCreateWithoutProductInput[] | Prisma.PurchaseItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.PurchaseItemCreateOrConnectWithoutProductInput | Prisma.PurchaseItemCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.PurchaseItemUpsertWithWhereUniqueWithoutProductInput | Prisma.PurchaseItemUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.PurchaseItemCreateManyProductInputEnvelope
  set?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  disconnect?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  delete?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  connect?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  update?: Prisma.PurchaseItemUpdateWithWhereUniqueWithoutProductInput | Prisma.PurchaseItemUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.PurchaseItemUpdateManyWithWhereWithoutProductInput | Prisma.PurchaseItemUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.PurchaseItemScalarWhereInput | Prisma.PurchaseItemScalarWhereInput[]
}

export type PurchaseItemUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.PurchaseItemCreateWithoutProductInput, Prisma.PurchaseItemUncheckedCreateWithoutProductInput> | Prisma.PurchaseItemCreateWithoutProductInput[] | Prisma.PurchaseItemUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.PurchaseItemCreateOrConnectWithoutProductInput | Prisma.PurchaseItemCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.PurchaseItemUpsertWithWhereUniqueWithoutProductInput | Prisma.PurchaseItemUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.PurchaseItemCreateManyProductInputEnvelope
  set?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  disconnect?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  delete?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  connect?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  update?: Prisma.PurchaseItemUpdateWithWhereUniqueWithoutProductInput | Prisma.PurchaseItemUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.PurchaseItemUpdateManyWithWhereWithoutProductInput | Prisma.PurchaseItemUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.PurchaseItemScalarWhereInput | Prisma.PurchaseItemScalarWhereInput[]
}

export type PurchaseItemCreateNestedManyWithoutPurchaseInput = {
  create?: Prisma.XOR<Prisma.PurchaseItemCreateWithoutPurchaseInput, Prisma.PurchaseItemUncheckedCreateWithoutPurchaseInput> | Prisma.PurchaseItemCreateWithoutPurchaseInput[] | Prisma.PurchaseItemUncheckedCreateWithoutPurchaseInput[]
  connectOrCreate?: Prisma.PurchaseItemCreateOrConnectWithoutPurchaseInput | Prisma.PurchaseItemCreateOrConnectWithoutPurchaseInput[]
  createMany?: Prisma.PurchaseItemCreateManyPurchaseInputEnvelope
  connect?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
}

export type PurchaseItemUncheckedCreateNestedManyWithoutPurchaseInput = {
  create?: Prisma.XOR<Prisma.PurchaseItemCreateWithoutPurchaseInput, Prisma.PurchaseItemUncheckedCreateWithoutPurchaseInput> | Prisma.PurchaseItemCreateWithoutPurchaseInput[] | Prisma.PurchaseItemUncheckedCreateWithoutPurchaseInput[]
  connectOrCreate?: Prisma.PurchaseItemCreateOrConnectWithoutPurchaseInput | Prisma.PurchaseItemCreateOrConnectWithoutPurchaseInput[]
  createMany?: Prisma.PurchaseItemCreateManyPurchaseInputEnvelope
  connect?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
}

export type PurchaseItemUpdateManyWithoutPurchaseNestedInput = {
  create?: Prisma.XOR<Prisma.PurchaseItemCreateWithoutPurchaseInput, Prisma.PurchaseItemUncheckedCreateWithoutPurchaseInput> | Prisma.PurchaseItemCreateWithoutPurchaseInput[] | Prisma.PurchaseItemUncheckedCreateWithoutPurchaseInput[]
  connectOrCreate?: Prisma.PurchaseItemCreateOrConnectWithoutPurchaseInput | Prisma.PurchaseItemCreateOrConnectWithoutPurchaseInput[]
  upsert?: Prisma.PurchaseItemUpsertWithWhereUniqueWithoutPurchaseInput | Prisma.PurchaseItemUpsertWithWhereUniqueWithoutPurchaseInput[]
  createMany?: Prisma.PurchaseItemCreateManyPurchaseInputEnvelope
  set?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  disconnect?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  delete?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  connect?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  update?: Prisma.PurchaseItemUpdateWithWhereUniqueWithoutPurchaseInput | Prisma.PurchaseItemUpdateWithWhereUniqueWithoutPurchaseInput[]
  updateMany?: Prisma.PurchaseItemUpdateManyWithWhereWithoutPurchaseInput | Prisma.PurchaseItemUpdateManyWithWhereWithoutPurchaseInput[]
  deleteMany?: Prisma.PurchaseItemScalarWhereInput | Prisma.PurchaseItemScalarWhereInput[]
}

export type PurchaseItemUncheckedUpdateManyWithoutPurchaseNestedInput = {
  create?: Prisma.XOR<Prisma.PurchaseItemCreateWithoutPurchaseInput, Prisma.PurchaseItemUncheckedCreateWithoutPurchaseInput> | Prisma.PurchaseItemCreateWithoutPurchaseInput[] | Prisma.PurchaseItemUncheckedCreateWithoutPurchaseInput[]
  connectOrCreate?: Prisma.PurchaseItemCreateOrConnectWithoutPurchaseInput | Prisma.PurchaseItemCreateOrConnectWithoutPurchaseInput[]
  upsert?: Prisma.PurchaseItemUpsertWithWhereUniqueWithoutPurchaseInput | Prisma.PurchaseItemUpsertWithWhereUniqueWithoutPurchaseInput[]
  createMany?: Prisma.PurchaseItemCreateManyPurchaseInputEnvelope
  set?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  disconnect?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  delete?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  connect?: Prisma.PurchaseItemWhereUniqueInput | Prisma.PurchaseItemWhereUniqueInput[]
  update?: Prisma.PurchaseItemUpdateWithWhereUniqueWithoutPurchaseInput | Prisma.PurchaseItemUpdateWithWhereUniqueWithoutPurchaseInput[]
  updateMany?: Prisma.PurchaseItemUpdateManyWithWhereWithoutPurchaseInput | Prisma.PurchaseItemUpdateManyWithWhereWithoutPurchaseInput[]
  deleteMany?: Prisma.PurchaseItemScalarWhereInput | Prisma.PurchaseItemScalarWhereInput[]
}

export type PurchaseItemCreateWithoutProductInput = {
  id?: string
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
  purchase: Prisma.PurchaseCreateNestedOneWithoutPurchaseItemInput
}

export type PurchaseItemUncheckedCreateWithoutProductInput = {
  id?: string
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
  purchaseId: string
}

export type PurchaseItemCreateOrConnectWithoutProductInput = {
  where: Prisma.PurchaseItemWhereUniqueInput
  create: Prisma.XOR<Prisma.PurchaseItemCreateWithoutProductInput, Prisma.PurchaseItemUncheckedCreateWithoutProductInput>
}

export type PurchaseItemCreateManyProductInputEnvelope = {
  data: Prisma.PurchaseItemCreateManyProductInput | Prisma.PurchaseItemCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type PurchaseItemUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.PurchaseItemWhereUniqueInput
  update: Prisma.XOR<Prisma.PurchaseItemUpdateWithoutProductInput, Prisma.PurchaseItemUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.PurchaseItemCreateWithoutProductInput, Prisma.PurchaseItemUncheckedCreateWithoutProductInput>
}

export type PurchaseItemUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.PurchaseItemWhereUniqueInput
  data: Prisma.XOR<Prisma.PurchaseItemUpdateWithoutProductInput, Prisma.PurchaseItemUncheckedUpdateWithoutProductInput>
}

export type PurchaseItemUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.PurchaseItemScalarWhereInput
  data: Prisma.XOR<Prisma.PurchaseItemUpdateManyMutationInput, Prisma.PurchaseItemUncheckedUpdateManyWithoutProductInput>
}

export type PurchaseItemScalarWhereInput = {
  AND?: Prisma.PurchaseItemScalarWhereInput | Prisma.PurchaseItemScalarWhereInput[]
  OR?: Prisma.PurchaseItemScalarWhereInput[]
  NOT?: Prisma.PurchaseItemScalarWhereInput | Prisma.PurchaseItemScalarWhereInput[]
  id?: Prisma.StringFilter<"PurchaseItem"> | string
  quantity?: Prisma.IntFilter<"PurchaseItem"> | number
  createdAt?: Prisma.DateTimeFilter<"PurchaseItem"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PurchaseItem"> | Date | string
  purchaseId?: Prisma.StringFilter<"PurchaseItem"> | string
  productId?: Prisma.StringFilter<"PurchaseItem"> | string
}

export type PurchaseItemCreateWithoutPurchaseInput = {
  id?: string
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
  product: Prisma.ProductCreateNestedOneWithoutPurchaseItemInput
}

export type PurchaseItemUncheckedCreateWithoutPurchaseInput = {
  id?: string
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
  productId: string
}

export type PurchaseItemCreateOrConnectWithoutPurchaseInput = {
  where: Prisma.PurchaseItemWhereUniqueInput
  create: Prisma.XOR<Prisma.PurchaseItemCreateWithoutPurchaseInput, Prisma.PurchaseItemUncheckedCreateWithoutPurchaseInput>
}

export type PurchaseItemCreateManyPurchaseInputEnvelope = {
  data: Prisma.PurchaseItemCreateManyPurchaseInput | Prisma.PurchaseItemCreateManyPurchaseInput[]
  skipDuplicates?: boolean
}

export type PurchaseItemUpsertWithWhereUniqueWithoutPurchaseInput = {
  where: Prisma.PurchaseItemWhereUniqueInput
  update: Prisma.XOR<Prisma.PurchaseItemUpdateWithoutPurchaseInput, Prisma.PurchaseItemUncheckedUpdateWithoutPurchaseInput>
  create: Prisma.XOR<Prisma.PurchaseItemCreateWithoutPurchaseInput, Prisma.PurchaseItemUncheckedCreateWithoutPurchaseInput>
}

export type PurchaseItemUpdateWithWhereUniqueWithoutPurchaseInput = {
  where: Prisma.PurchaseItemWhereUniqueInput
  data: Prisma.XOR<Prisma.PurchaseItemUpdateWithoutPurchaseInput, Prisma.PurchaseItemUncheckedUpdateWithoutPurchaseInput>
}

export type PurchaseItemUpdateManyWithWhereWithoutPurchaseInput = {
  where: Prisma.PurchaseItemScalarWhereInput
  data: Prisma.XOR<Prisma.PurchaseItemUpdateManyMutationInput, Prisma.PurchaseItemUncheckedUpdateManyWithoutPurchaseInput>
}

export type PurchaseItemCreateManyProductInput = {
  id?: string
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
  purchaseId: string
}

export type PurchaseItemUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchase?: Prisma.PurchaseUpdateOneRequiredWithoutPurchaseItemNestedInput
}

export type PurchaseItemUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchaseId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PurchaseItemUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  purchaseId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PurchaseItemCreateManyPurchaseInput = {
  id?: string
  quantity: number
  createdAt?: Date | string
  updatedAt?: Date | string
  productId: string
}

export type PurchaseItemUpdateWithoutPurchaseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  product?: Prisma.ProductUpdateOneRequiredWithoutPurchaseItemNestedInput
}

export type PurchaseItemUncheckedUpdateWithoutPurchaseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type PurchaseItemUncheckedUpdateManyWithoutPurchaseInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type PurchaseItemSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  quantity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  purchaseId?: boolean
  productId?: boolean
  purchase?: boolean | Prisma.PurchaseDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["purchaseItem"]>



export type PurchaseItemSelectScalar = {
  id?: boolean
  quantity?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  purchaseId?: boolean
  productId?: boolean
}

export type PurchaseItemOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "quantity" | "createdAt" | "updatedAt" | "purchaseId" | "productId", ExtArgs["result"]["purchaseItem"]>
export type PurchaseItemInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  purchase?: boolean | Prisma.PurchaseDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $PurchaseItemPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PurchaseItem"
  objects: {
    purchase: Prisma.$PurchasePayload<ExtArgs>
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    quantity: number
    createdAt: Date
    updatedAt: Date
    purchaseId: string
    productId: string
  }, ExtArgs["result"]["purchaseItem"]>
  composites: {}
}

export type PurchaseItemGetPayload<S extends boolean | null | undefined | PurchaseItemDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PurchaseItemPayload, S>

export type PurchaseItemCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PurchaseItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PurchaseItemCountAggregateInputType | true
  }

export interface PurchaseItemDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PurchaseItem'], meta: { name: 'PurchaseItem' } }
  /**
   * Find zero or one PurchaseItem that matches the filter.
   * @param {PurchaseItemFindUniqueArgs} args - Arguments to find a PurchaseItem
   * @example
   * // Get one PurchaseItem
   * const purchaseItem = await prisma.purchaseItem.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PurchaseItemFindUniqueArgs>(args: Prisma.SelectSubset<T, PurchaseItemFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PurchaseItemClient<runtime.Types.Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PurchaseItem that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PurchaseItemFindUniqueOrThrowArgs} args - Arguments to find a PurchaseItem
   * @example
   * // Get one PurchaseItem
   * const purchaseItem = await prisma.purchaseItem.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PurchaseItemFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PurchaseItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PurchaseItemClient<runtime.Types.Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PurchaseItem that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseItemFindFirstArgs} args - Arguments to find a PurchaseItem
   * @example
   * // Get one PurchaseItem
   * const purchaseItem = await prisma.purchaseItem.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PurchaseItemFindFirstArgs>(args?: Prisma.SelectSubset<T, PurchaseItemFindFirstArgs<ExtArgs>>): Prisma.Prisma__PurchaseItemClient<runtime.Types.Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PurchaseItem that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseItemFindFirstOrThrowArgs} args - Arguments to find a PurchaseItem
   * @example
   * // Get one PurchaseItem
   * const purchaseItem = await prisma.purchaseItem.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PurchaseItemFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PurchaseItemFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PurchaseItemClient<runtime.Types.Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PurchaseItems that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseItemFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PurchaseItems
   * const purchaseItems = await prisma.purchaseItem.findMany()
   * 
   * // Get first 10 PurchaseItems
   * const purchaseItems = await prisma.purchaseItem.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const purchaseItemWithIdOnly = await prisma.purchaseItem.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PurchaseItemFindManyArgs>(args?: Prisma.SelectSubset<T, PurchaseItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PurchaseItem.
   * @param {PurchaseItemCreateArgs} args - Arguments to create a PurchaseItem.
   * @example
   * // Create one PurchaseItem
   * const PurchaseItem = await prisma.purchaseItem.create({
   *   data: {
   *     // ... data to create a PurchaseItem
   *   }
   * })
   * 
   */
  create<T extends PurchaseItemCreateArgs>(args: Prisma.SelectSubset<T, PurchaseItemCreateArgs<ExtArgs>>): Prisma.Prisma__PurchaseItemClient<runtime.Types.Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PurchaseItems.
   * @param {PurchaseItemCreateManyArgs} args - Arguments to create many PurchaseItems.
   * @example
   * // Create many PurchaseItems
   * const purchaseItem = await prisma.purchaseItem.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PurchaseItemCreateManyArgs>(args?: Prisma.SelectSubset<T, PurchaseItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a PurchaseItem.
   * @param {PurchaseItemDeleteArgs} args - Arguments to delete one PurchaseItem.
   * @example
   * // Delete one PurchaseItem
   * const PurchaseItem = await prisma.purchaseItem.delete({
   *   where: {
   *     // ... filter to delete one PurchaseItem
   *   }
   * })
   * 
   */
  delete<T extends PurchaseItemDeleteArgs>(args: Prisma.SelectSubset<T, PurchaseItemDeleteArgs<ExtArgs>>): Prisma.Prisma__PurchaseItemClient<runtime.Types.Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PurchaseItem.
   * @param {PurchaseItemUpdateArgs} args - Arguments to update one PurchaseItem.
   * @example
   * // Update one PurchaseItem
   * const purchaseItem = await prisma.purchaseItem.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PurchaseItemUpdateArgs>(args: Prisma.SelectSubset<T, PurchaseItemUpdateArgs<ExtArgs>>): Prisma.Prisma__PurchaseItemClient<runtime.Types.Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PurchaseItems.
   * @param {PurchaseItemDeleteManyArgs} args - Arguments to filter PurchaseItems to delete.
   * @example
   * // Delete a few PurchaseItems
   * const { count } = await prisma.purchaseItem.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PurchaseItemDeleteManyArgs>(args?: Prisma.SelectSubset<T, PurchaseItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PurchaseItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseItemUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PurchaseItems
   * const purchaseItem = await prisma.purchaseItem.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PurchaseItemUpdateManyArgs>(args: Prisma.SelectSubset<T, PurchaseItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one PurchaseItem.
   * @param {PurchaseItemUpsertArgs} args - Arguments to update or create a PurchaseItem.
   * @example
   * // Update or create a PurchaseItem
   * const purchaseItem = await prisma.purchaseItem.upsert({
   *   create: {
   *     // ... data to create a PurchaseItem
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PurchaseItem we want to update
   *   }
   * })
   */
  upsert<T extends PurchaseItemUpsertArgs>(args: Prisma.SelectSubset<T, PurchaseItemUpsertArgs<ExtArgs>>): Prisma.Prisma__PurchaseItemClient<runtime.Types.Result.GetResult<Prisma.$PurchaseItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PurchaseItems.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseItemCountArgs} args - Arguments to filter PurchaseItems to count.
   * @example
   * // Count the number of PurchaseItems
   * const count = await prisma.purchaseItem.count({
   *   where: {
   *     // ... the filter for the PurchaseItems we want to count
   *   }
   * })
  **/
  count<T extends PurchaseItemCountArgs>(
    args?: Prisma.Subset<T, PurchaseItemCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PurchaseItemCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PurchaseItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PurchaseItemAggregateArgs>(args: Prisma.Subset<T, PurchaseItemAggregateArgs>): Prisma.PrismaPromise<GetPurchaseItemAggregateType<T>>

  /**
   * Group by PurchaseItem.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PurchaseItemGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PurchaseItemGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PurchaseItemGroupByArgs['orderBy'] }
      : { orderBy?: PurchaseItemGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PurchaseItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPurchaseItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PurchaseItem model
 */
readonly fields: PurchaseItemFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PurchaseItem.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PurchaseItemClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  purchase<T extends Prisma.PurchaseDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PurchaseDefaultArgs<ExtArgs>>): Prisma.Prisma__PurchaseClient<runtime.Types.Result.GetResult<Prisma.$PurchasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PurchaseItem model
 */
export interface PurchaseItemFieldRefs {
  readonly id: Prisma.FieldRef<"PurchaseItem", 'String'>
  readonly quantity: Prisma.FieldRef<"PurchaseItem", 'Int'>
  readonly createdAt: Prisma.FieldRef<"PurchaseItem", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PurchaseItem", 'DateTime'>
  readonly purchaseId: Prisma.FieldRef<"PurchaseItem", 'String'>
  readonly productId: Prisma.FieldRef<"PurchaseItem", 'String'>
}
    

// Custom InputTypes
/**
 * PurchaseItem findUnique
 */
export type PurchaseItemFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseItem
   */
  select?: Prisma.PurchaseItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseItem
   */
  omit?: Prisma.PurchaseItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseItemInclude<ExtArgs> | null
  /**
   * Filter, which PurchaseItem to fetch.
   */
  where: Prisma.PurchaseItemWhereUniqueInput
}

/**
 * PurchaseItem findUniqueOrThrow
 */
export type PurchaseItemFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseItem
   */
  select?: Prisma.PurchaseItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseItem
   */
  omit?: Prisma.PurchaseItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseItemInclude<ExtArgs> | null
  /**
   * Filter, which PurchaseItem to fetch.
   */
  where: Prisma.PurchaseItemWhereUniqueInput
}

/**
 * PurchaseItem findFirst
 */
export type PurchaseItemFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseItem
   */
  select?: Prisma.PurchaseItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseItem
   */
  omit?: Prisma.PurchaseItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseItemInclude<ExtArgs> | null
  /**
   * Filter, which PurchaseItem to fetch.
   */
  where?: Prisma.PurchaseItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PurchaseItems to fetch.
   */
  orderBy?: Prisma.PurchaseItemOrderByWithRelationInput | Prisma.PurchaseItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PurchaseItems.
   */
  cursor?: Prisma.PurchaseItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PurchaseItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PurchaseItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PurchaseItems.
   */
  distinct?: Prisma.PurchaseItemScalarFieldEnum | Prisma.PurchaseItemScalarFieldEnum[]
}

/**
 * PurchaseItem findFirstOrThrow
 */
export type PurchaseItemFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseItem
   */
  select?: Prisma.PurchaseItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseItem
   */
  omit?: Prisma.PurchaseItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseItemInclude<ExtArgs> | null
  /**
   * Filter, which PurchaseItem to fetch.
   */
  where?: Prisma.PurchaseItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PurchaseItems to fetch.
   */
  orderBy?: Prisma.PurchaseItemOrderByWithRelationInput | Prisma.PurchaseItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PurchaseItems.
   */
  cursor?: Prisma.PurchaseItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PurchaseItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PurchaseItems.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PurchaseItems.
   */
  distinct?: Prisma.PurchaseItemScalarFieldEnum | Prisma.PurchaseItemScalarFieldEnum[]
}

/**
 * PurchaseItem findMany
 */
export type PurchaseItemFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseItem
   */
  select?: Prisma.PurchaseItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseItem
   */
  omit?: Prisma.PurchaseItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseItemInclude<ExtArgs> | null
  /**
   * Filter, which PurchaseItems to fetch.
   */
  where?: Prisma.PurchaseItemWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PurchaseItems to fetch.
   */
  orderBy?: Prisma.PurchaseItemOrderByWithRelationInput | Prisma.PurchaseItemOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PurchaseItems.
   */
  cursor?: Prisma.PurchaseItemWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PurchaseItems from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PurchaseItems.
   */
  skip?: number
  distinct?: Prisma.PurchaseItemScalarFieldEnum | Prisma.PurchaseItemScalarFieldEnum[]
}

/**
 * PurchaseItem create
 */
export type PurchaseItemCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseItem
   */
  select?: Prisma.PurchaseItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseItem
   */
  omit?: Prisma.PurchaseItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseItemInclude<ExtArgs> | null
  /**
   * The data needed to create a PurchaseItem.
   */
  data: Prisma.XOR<Prisma.PurchaseItemCreateInput, Prisma.PurchaseItemUncheckedCreateInput>
}

/**
 * PurchaseItem createMany
 */
export type PurchaseItemCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PurchaseItems.
   */
  data: Prisma.PurchaseItemCreateManyInput | Prisma.PurchaseItemCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PurchaseItem update
 */
export type PurchaseItemUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseItem
   */
  select?: Prisma.PurchaseItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseItem
   */
  omit?: Prisma.PurchaseItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseItemInclude<ExtArgs> | null
  /**
   * The data needed to update a PurchaseItem.
   */
  data: Prisma.XOR<Prisma.PurchaseItemUpdateInput, Prisma.PurchaseItemUncheckedUpdateInput>
  /**
   * Choose, which PurchaseItem to update.
   */
  where: Prisma.PurchaseItemWhereUniqueInput
}

/**
 * PurchaseItem updateMany
 */
export type PurchaseItemUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PurchaseItems.
   */
  data: Prisma.XOR<Prisma.PurchaseItemUpdateManyMutationInput, Prisma.PurchaseItemUncheckedUpdateManyInput>
  /**
   * Filter which PurchaseItems to update
   */
  where?: Prisma.PurchaseItemWhereInput
  /**
   * Limit how many PurchaseItems to update.
   */
  limit?: number
}

/**
 * PurchaseItem upsert
 */
export type PurchaseItemUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseItem
   */
  select?: Prisma.PurchaseItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseItem
   */
  omit?: Prisma.PurchaseItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseItemInclude<ExtArgs> | null
  /**
   * The filter to search for the PurchaseItem to update in case it exists.
   */
  where: Prisma.PurchaseItemWhereUniqueInput
  /**
   * In case the PurchaseItem found by the `where` argument doesn't exist, create a new PurchaseItem with this data.
   */
  create: Prisma.XOR<Prisma.PurchaseItemCreateInput, Prisma.PurchaseItemUncheckedCreateInput>
  /**
   * In case the PurchaseItem was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PurchaseItemUpdateInput, Prisma.PurchaseItemUncheckedUpdateInput>
}

/**
 * PurchaseItem delete
 */
export type PurchaseItemDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseItem
   */
  select?: Prisma.PurchaseItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseItem
   */
  omit?: Prisma.PurchaseItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseItemInclude<ExtArgs> | null
  /**
   * Filter which PurchaseItem to delete.
   */
  where: Prisma.PurchaseItemWhereUniqueInput
}

/**
 * PurchaseItem deleteMany
 */
export type PurchaseItemDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PurchaseItems to delete
   */
  where?: Prisma.PurchaseItemWhereInput
  /**
   * Limit how many PurchaseItems to delete.
   */
  limit?: number
}

/**
 * PurchaseItem without action
 */
export type PurchaseItemDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PurchaseItem
   */
  select?: Prisma.PurchaseItemSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PurchaseItem
   */
  omit?: Prisma.PurchaseItemOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PurchaseItemInclude<ExtArgs> | null
}
