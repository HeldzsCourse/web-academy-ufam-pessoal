
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserType
 * 
 */
export type UserTypeModel = runtime.Types.Result.DefaultSelection<Prisma.$UserTypePayload>

export type AggregateUserType = {
  _count: UserTypeCountAggregateOutputType | null
  _min: UserTypeMinAggregateOutputType | null
  _max: UserTypeMaxAggregateOutputType | null
}

export type UserTypeMinAggregateOutputType = {
  id: string | null
  label: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserTypeMaxAggregateOutputType = {
  id: string | null
  label: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UserTypeCountAggregateOutputType = {
  id: number
  label: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UserTypeMinAggregateInputType = {
  id?: true
  label?: true
  createdAt?: true
  updatedAt?: true
}

export type UserTypeMaxAggregateInputType = {
  id?: true
  label?: true
  createdAt?: true
  updatedAt?: true
}

export type UserTypeCountAggregateInputType = {
  id?: true
  label?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UserTypeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserType to aggregate.
   */
  where?: Prisma.UserTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserTypes to fetch.
   */
  orderBy?: Prisma.UserTypeOrderByWithRelationInput | Prisma.UserTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserTypes
  **/
  _count?: true | UserTypeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserTypeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserTypeMaxAggregateInputType
}

export type GetUserTypeAggregateType<T extends UserTypeAggregateArgs> = {
      [P in keyof T & keyof AggregateUserType]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserType[P]>
    : Prisma.GetScalarType<T[P], AggregateUserType[P]>
}




export type UserTypeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserTypeWhereInput
  orderBy?: Prisma.UserTypeOrderByWithAggregationInput | Prisma.UserTypeOrderByWithAggregationInput[]
  by: Prisma.UserTypeScalarFieldEnum[] | Prisma.UserTypeScalarFieldEnum
  having?: Prisma.UserTypeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserTypeCountAggregateInputType | true
  _min?: UserTypeMinAggregateInputType
  _max?: UserTypeMaxAggregateInputType
}

export type UserTypeGroupByOutputType = {
  id: string
  label: string
  createdAt: Date
  updatedAt: Date
  _count: UserTypeCountAggregateOutputType | null
  _min: UserTypeMinAggregateOutputType | null
  _max: UserTypeMaxAggregateOutputType | null
}

type GetUserTypeGroupByPayload<T extends UserTypeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserTypeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserTypeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserTypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserTypeGroupByOutputType[P]>
      }
    >
  >



export type UserTypeWhereInput = {
  AND?: Prisma.UserTypeWhereInput | Prisma.UserTypeWhereInput[]
  OR?: Prisma.UserTypeWhereInput[]
  NOT?: Prisma.UserTypeWhereInput | Prisma.UserTypeWhereInput[]
  id?: Prisma.StringFilter<"UserType"> | string
  label?: Prisma.StringFilter<"UserType"> | string
  createdAt?: Prisma.DateTimeFilter<"UserType"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserType"> | Date | string
  User?: Prisma.UserListRelationFilter
}

export type UserTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  User?: Prisma.UserOrderByRelationAggregateInput
  _relevance?: Prisma.UserTypeOrderByRelevanceInput
}

export type UserTypeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  label?: string
  AND?: Prisma.UserTypeWhereInput | Prisma.UserTypeWhereInput[]
  OR?: Prisma.UserTypeWhereInput[]
  NOT?: Prisma.UserTypeWhereInput | Prisma.UserTypeWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"UserType"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"UserType"> | Date | string
  User?: Prisma.UserListRelationFilter
}, "id" | "label">

export type UserTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UserTypeCountOrderByAggregateInput
  _max?: Prisma.UserTypeMaxOrderByAggregateInput
  _min?: Prisma.UserTypeMinOrderByAggregateInput
}

export type UserTypeScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserTypeScalarWhereWithAggregatesInput | Prisma.UserTypeScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserTypeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserTypeScalarWhereWithAggregatesInput | Prisma.UserTypeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"UserType"> | string
  label?: Prisma.StringWithAggregatesFilter<"UserType"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"UserType"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"UserType"> | Date | string
}

export type UserTypeCreateInput = {
  id?: string
  label: string
  createdAt?: Date | string
  updatedAt?: Date | string
  User?: Prisma.UserCreateNestedManyWithoutUserTypeInput
}

export type UserTypeUncheckedCreateInput = {
  id?: string
  label: string
  createdAt?: Date | string
  updatedAt?: Date | string
  User?: Prisma.UserUncheckedCreateNestedManyWithoutUserTypeInput
}

export type UserTypeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  User?: Prisma.UserUpdateManyWithoutUserTypeNestedInput
}

export type UserTypeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  User?: Prisma.UserUncheckedUpdateManyWithoutUserTypeNestedInput
}

export type UserTypeCreateManyInput = {
  id?: string
  label: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserTypeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserTypeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserTypeScalarRelationFilter = {
  is?: Prisma.UserTypeWhereInput
  isNot?: Prisma.UserTypeWhereInput
}

export type UserTypeOrderByRelevanceInput = {
  fields: Prisma.UserTypeOrderByRelevanceFieldEnum | Prisma.UserTypeOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type UserTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  label?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UserTypeCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.UserTypeCreateWithoutUserInput, Prisma.UserTypeUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserTypeCreateOrConnectWithoutUserInput
  connect?: Prisma.UserTypeWhereUniqueInput
}

export type UserTypeUpdateOneRequiredWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.UserTypeCreateWithoutUserInput, Prisma.UserTypeUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.UserTypeCreateOrConnectWithoutUserInput
  upsert?: Prisma.UserTypeUpsertWithoutUserInput
  connect?: Prisma.UserTypeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UserTypeUpdateToOneWithWhereWithoutUserInput, Prisma.UserTypeUpdateWithoutUserInput>, Prisma.UserTypeUncheckedUpdateWithoutUserInput>
}

export type UserTypeCreateWithoutUserInput = {
  id?: string
  label: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserTypeUncheckedCreateWithoutUserInput = {
  id?: string
  label: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UserTypeCreateOrConnectWithoutUserInput = {
  where: Prisma.UserTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.UserTypeCreateWithoutUserInput, Prisma.UserTypeUncheckedCreateWithoutUserInput>
}

export type UserTypeUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.UserTypeUpdateWithoutUserInput, Prisma.UserTypeUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.UserTypeCreateWithoutUserInput, Prisma.UserTypeUncheckedCreateWithoutUserInput>
  where?: Prisma.UserTypeWhereInput
}

export type UserTypeUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.UserTypeWhereInput
  data: Prisma.XOR<Prisma.UserTypeUpdateWithoutUserInput, Prisma.UserTypeUncheckedUpdateWithoutUserInput>
}

export type UserTypeUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UserTypeUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  label?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type UserTypeCountOutputType
 */

export type UserTypeCountOutputType = {
  User: number
}

export type UserTypeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | UserTypeCountOutputTypeCountUserArgs
}

/**
 * UserTypeCountOutputType without action
 */
export type UserTypeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserTypeCountOutputType
   */
  select?: Prisma.UserTypeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UserTypeCountOutputType without action
 */
export type UserTypeCountOutputTypeCountUserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
}


export type UserTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  label?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  User?: boolean | Prisma.UserType$UserArgs<ExtArgs>
  _count?: boolean | Prisma.UserTypeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["userType"]>



export type UserTypeSelectScalar = {
  id?: boolean
  label?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UserTypeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "label" | "createdAt" | "updatedAt", ExtArgs["result"]["userType"]>
export type UserTypeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  User?: boolean | Prisma.UserType$UserArgs<ExtArgs>
  _count?: boolean | Prisma.UserTypeCountOutputTypeDefaultArgs<ExtArgs>
}

export type $UserTypePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserType"
  objects: {
    User: Prisma.$UserPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    label: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["userType"]>
  composites: {}
}

export type UserTypeGetPayload<S extends boolean | null | undefined | UserTypeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserTypePayload, S>

export type UserTypeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserTypeCountAggregateInputType | true
  }

export interface UserTypeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserType'], meta: { name: 'UserType' } }
  /**
   * Find zero or one UserType that matches the filter.
   * @param {UserTypeFindUniqueArgs} args - Arguments to find a UserType
   * @example
   * // Get one UserType
   * const userType = await prisma.userType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserTypeFindUniqueArgs>(args: Prisma.SelectSubset<T, UserTypeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserTypeClient<runtime.Types.Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserTypeFindUniqueOrThrowArgs} args - Arguments to find a UserType
   * @example
   * // Get one UserType
   * const userType = await prisma.userType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserTypeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserTypeClient<runtime.Types.Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTypeFindFirstArgs} args - Arguments to find a UserType
   * @example
   * // Get one UserType
   * const userType = await prisma.userType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserTypeFindFirstArgs>(args?: Prisma.SelectSubset<T, UserTypeFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserTypeClient<runtime.Types.Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTypeFindFirstOrThrowArgs} args - Arguments to find a UserType
   * @example
   * // Get one UserType
   * const userType = await prisma.userType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserTypeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserTypeClient<runtime.Types.Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserTypes
   * const userTypes = await prisma.userType.findMany()
   * 
   * // Get first 10 UserTypes
   * const userTypes = await prisma.userType.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userTypeWithIdOnly = await prisma.userType.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserTypeFindManyArgs>(args?: Prisma.SelectSubset<T, UserTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserType.
   * @param {UserTypeCreateArgs} args - Arguments to create a UserType.
   * @example
   * // Create one UserType
   * const UserType = await prisma.userType.create({
   *   data: {
   *     // ... data to create a UserType
   *   }
   * })
   * 
   */
  create<T extends UserTypeCreateArgs>(args: Prisma.SelectSubset<T, UserTypeCreateArgs<ExtArgs>>): Prisma.Prisma__UserTypeClient<runtime.Types.Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserTypes.
   * @param {UserTypeCreateManyArgs} args - Arguments to create many UserTypes.
   * @example
   * // Create many UserTypes
   * const userType = await prisma.userType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserTypeCreateManyArgs>(args?: Prisma.SelectSubset<T, UserTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a UserType.
   * @param {UserTypeDeleteArgs} args - Arguments to delete one UserType.
   * @example
   * // Delete one UserType
   * const UserType = await prisma.userType.delete({
   *   where: {
   *     // ... filter to delete one UserType
   *   }
   * })
   * 
   */
  delete<T extends UserTypeDeleteArgs>(args: Prisma.SelectSubset<T, UserTypeDeleteArgs<ExtArgs>>): Prisma.Prisma__UserTypeClient<runtime.Types.Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserType.
   * @param {UserTypeUpdateArgs} args - Arguments to update one UserType.
   * @example
   * // Update one UserType
   * const userType = await prisma.userType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserTypeUpdateArgs>(args: Prisma.SelectSubset<T, UserTypeUpdateArgs<ExtArgs>>): Prisma.Prisma__UserTypeClient<runtime.Types.Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserTypes.
   * @param {UserTypeDeleteManyArgs} args - Arguments to filter UserTypes to delete.
   * @example
   * // Delete a few UserTypes
   * const { count } = await prisma.userType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserTypeDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserTypes
   * const userType = await prisma.userType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserTypeUpdateManyArgs>(args: Prisma.SelectSubset<T, UserTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one UserType.
   * @param {UserTypeUpsertArgs} args - Arguments to update or create a UserType.
   * @example
   * // Update or create a UserType
   * const userType = await prisma.userType.upsert({
   *   create: {
   *     // ... data to create a UserType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserType we want to update
   *   }
   * })
   */
  upsert<T extends UserTypeUpsertArgs>(args: Prisma.SelectSubset<T, UserTypeUpsertArgs<ExtArgs>>): Prisma.Prisma__UserTypeClient<runtime.Types.Result.GetResult<Prisma.$UserTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTypeCountArgs} args - Arguments to filter UserTypes to count.
   * @example
   * // Count the number of UserTypes
   * const count = await prisma.userType.count({
   *   where: {
   *     // ... the filter for the UserTypes we want to count
   *   }
   * })
  **/
  count<T extends UserTypeCountArgs>(
    args?: Prisma.Subset<T, UserTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserTypeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserTypeAggregateArgs>(args: Prisma.Subset<T, UserTypeAggregateArgs>): Prisma.PrismaPromise<GetUserTypeAggregateType<T>>

  /**
   * Group by UserType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserTypeGroupByArgs['orderBy'] }
      : { orderBy?: UserTypeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserType model
 */
readonly fields: UserTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserTypeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  User<T extends Prisma.UserType$UserArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserType$UserArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserType model
 */
export interface UserTypeFieldRefs {
  readonly id: Prisma.FieldRef<"UserType", 'String'>
  readonly label: Prisma.FieldRef<"UserType", 'String'>
  readonly createdAt: Prisma.FieldRef<"UserType", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"UserType", 'DateTime'>
}
    

// Custom InputTypes
/**
 * UserType findUnique
 */
export type UserTypeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserType
   */
  select?: Prisma.UserTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserType
   */
  omit?: Prisma.UserTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTypeInclude<ExtArgs> | null
  /**
   * Filter, which UserType to fetch.
   */
  where: Prisma.UserTypeWhereUniqueInput
}

/**
 * UserType findUniqueOrThrow
 */
export type UserTypeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserType
   */
  select?: Prisma.UserTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserType
   */
  omit?: Prisma.UserTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTypeInclude<ExtArgs> | null
  /**
   * Filter, which UserType to fetch.
   */
  where: Prisma.UserTypeWhereUniqueInput
}

/**
 * UserType findFirst
 */
export type UserTypeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserType
   */
  select?: Prisma.UserTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserType
   */
  omit?: Prisma.UserTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTypeInclude<ExtArgs> | null
  /**
   * Filter, which UserType to fetch.
   */
  where?: Prisma.UserTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserTypes to fetch.
   */
  orderBy?: Prisma.UserTypeOrderByWithRelationInput | Prisma.UserTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserTypes.
   */
  cursor?: Prisma.UserTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserTypes.
   */
  distinct?: Prisma.UserTypeScalarFieldEnum | Prisma.UserTypeScalarFieldEnum[]
}

/**
 * UserType findFirstOrThrow
 */
export type UserTypeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserType
   */
  select?: Prisma.UserTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserType
   */
  omit?: Prisma.UserTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTypeInclude<ExtArgs> | null
  /**
   * Filter, which UserType to fetch.
   */
  where?: Prisma.UserTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserTypes to fetch.
   */
  orderBy?: Prisma.UserTypeOrderByWithRelationInput | Prisma.UserTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserTypes.
   */
  cursor?: Prisma.UserTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserTypes.
   */
  distinct?: Prisma.UserTypeScalarFieldEnum | Prisma.UserTypeScalarFieldEnum[]
}

/**
 * UserType findMany
 */
export type UserTypeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserType
   */
  select?: Prisma.UserTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserType
   */
  omit?: Prisma.UserTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTypeInclude<ExtArgs> | null
  /**
   * Filter, which UserTypes to fetch.
   */
  where?: Prisma.UserTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserTypes to fetch.
   */
  orderBy?: Prisma.UserTypeOrderByWithRelationInput | Prisma.UserTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserTypes.
   */
  cursor?: Prisma.UserTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserTypes.
   */
  skip?: number
  distinct?: Prisma.UserTypeScalarFieldEnum | Prisma.UserTypeScalarFieldEnum[]
}

/**
 * UserType create
 */
export type UserTypeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserType
   */
  select?: Prisma.UserTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserType
   */
  omit?: Prisma.UserTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTypeInclude<ExtArgs> | null
  /**
   * The data needed to create a UserType.
   */
  data: Prisma.XOR<Prisma.UserTypeCreateInput, Prisma.UserTypeUncheckedCreateInput>
}

/**
 * UserType createMany
 */
export type UserTypeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserTypes.
   */
  data: Prisma.UserTypeCreateManyInput | Prisma.UserTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserType update
 */
export type UserTypeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserType
   */
  select?: Prisma.UserTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserType
   */
  omit?: Prisma.UserTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTypeInclude<ExtArgs> | null
  /**
   * The data needed to update a UserType.
   */
  data: Prisma.XOR<Prisma.UserTypeUpdateInput, Prisma.UserTypeUncheckedUpdateInput>
  /**
   * Choose, which UserType to update.
   */
  where: Prisma.UserTypeWhereUniqueInput
}

/**
 * UserType updateMany
 */
export type UserTypeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserTypes.
   */
  data: Prisma.XOR<Prisma.UserTypeUpdateManyMutationInput, Prisma.UserTypeUncheckedUpdateManyInput>
  /**
   * Filter which UserTypes to update
   */
  where?: Prisma.UserTypeWhereInput
  /**
   * Limit how many UserTypes to update.
   */
  limit?: number
}

/**
 * UserType upsert
 */
export type UserTypeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserType
   */
  select?: Prisma.UserTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserType
   */
  omit?: Prisma.UserTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTypeInclude<ExtArgs> | null
  /**
   * The filter to search for the UserType to update in case it exists.
   */
  where: Prisma.UserTypeWhereUniqueInput
  /**
   * In case the UserType found by the `where` argument doesn't exist, create a new UserType with this data.
   */
  create: Prisma.XOR<Prisma.UserTypeCreateInput, Prisma.UserTypeUncheckedCreateInput>
  /**
   * In case the UserType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserTypeUpdateInput, Prisma.UserTypeUncheckedUpdateInput>
}

/**
 * UserType delete
 */
export type UserTypeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserType
   */
  select?: Prisma.UserTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserType
   */
  omit?: Prisma.UserTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTypeInclude<ExtArgs> | null
  /**
   * Filter which UserType to delete.
   */
  where: Prisma.UserTypeWhereUniqueInput
}

/**
 * UserType deleteMany
 */
export type UserTypeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserTypes to delete
   */
  where?: Prisma.UserTypeWhereInput
  /**
   * Limit how many UserTypes to delete.
   */
  limit?: number
}

/**
 * UserType.User
 */
export type UserType$UserArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  cursor?: Prisma.UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * UserType without action
 */
export type UserTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserType
   */
  select?: Prisma.UserTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserType
   */
  omit?: Prisma.UserTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserTypeInclude<ExtArgs> | null
}
